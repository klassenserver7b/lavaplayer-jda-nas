subprojects {
  repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }
}

ext.slf4jVersion = '1.7.25'

group = 'com.sedmelluq'

subprojects {
  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'

  java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    withSourcesJar()
    //withJavadocJar()
  }
}

// Detect libc implementation by checking /proc/self/maps
def detectLibc() {

  try {
    //def process = "ldd --version".execute()
    //process.waitFor()
    //def output = process.text
    //if (output.contains("GNU libc") || output.contains("GLIBC")) {
    //    println "Detected: glibc"
    //    return ""
    //} else if (output.contains("musl libc")) {
    //    println "Detected: musl-libc"
    //    return "-musl"
    //}
    
    def mapsFile = new File("/proc/self/maps")
    if (mapsFile.exists()) {
      mapsFile.eachLine { line ->
        if (line.contains("-musl-")) {
          println "Detected musl libc"
          return "-musl"
        }
      }
    }
  } catch (Exception e) {
    println "Failed to detect libc type, assuming glibc: ${e.message}"
  }
  
  // Default assumption: glibc
  println "Didnt detect musl - assuming glibc"
  return ""
}

ext.libcType = detectLibc()

import org.apache.tools.ant.taskdefs.condition.Os
def getBuildParameters(base, bits) {
  def bitSuffix = (bits == 32) ? 'x86' : 'x86-64'

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return [
            'identifier': "win-${bitSuffix}",
            'library': "${base}.dll",
            'setupArguments': ["-DBITZ:STRING=${bits}", '-A', (bits == 64 ? 'x64' : 'Win32')],
            'buildArguments': ['--config', 'Release'],
            'env': [:]
    ]
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    return [
            'identifier': 'darwin',
            'library': "lib${base}.dylib",
            'setupArguments': ["-DBITZ:STRING=${bits}"],
            'buildArguments': [],
            'env': ['CXXFLAGS': "-m${bits}", 'CFLAGS': "-m${bits}", 'LDFLAGS': "-m${bits}"]
    ]
  } else {
    return [
            'identifier': "linux${libcType}-${bitSuffix}",
            'library': "lib${base}.so",
            'setupArguments': ["-DBITZ:STRING=${bits}"],
            'buildArguments': [],
            'env': ['CXXFLAGS': "-m${bits}", 'CFLAGS': "-m${bits}", 'LDFLAGS': "-m${bits}"]
    ]
  }
}

def getHomeDirectory() {
  def directory = file(System.getProperty('java.home'))
  return directory.name == 'jre' ? directory.parentFile.absolutePath : directory.absolutePath
}

def createBuildTask(tasksHolder, config, bits) {
  def parameters = getBuildParameters(config.name, bits)
  println "Creating build task for ${config.name} (${bits}-bit) with identifier: ${parameters.identifier}"
  def buildDirectory = "${config.buildBase}/${parameters.identifier}"
  def distDirectory = "${config.projectBase}/dist/${parameters.identifier}"
  def deployDirectory = "${config.deployBase}/src/main/resources/natives/${parameters.identifier}"
  def taskBase = "${config.name}-${bits}"

  if (Os.isFamily(Os.FAMILY_MAC) && bits != 64) {
    return
  }

  parameters.env.put('DIST_DIR', distDirectory)
  parameters.env.put('JAVA_HOME', getHomeDirectory())

  def setupTask = tasksHolder.create("${taskBase}-setup", Exec) {
    doFirst {
      if (config.setupDoFirst) {
        config.setupDoFirst(config, bits)
      }

      file(buildDirectory).with {
        it.deleteDir()
        it.mkdirs()
      }
    }

    workingDir buildDirectory
    executable 'cmake'
    args(parameters.setupArguments + ['../..'])
    environment parameters.env
  }

  def buildTask = tasksHolder.create("${taskBase}-build", Exec) {
    workingDir buildDirectory
    executable 'cmake'
    args(['--build', '.'] + parameters.buildArguments)
    environment parameters.env
  }

/*
  def deployTask = tasksHolder.create("${taskBase}-deploy") { doLast {
    copy {
      from distDirectory
      into deployDirectory
    }
  }}

  tasksHolder.create("${taskBase}-deploy-only") { doLast {
    copy {
      from distDirectory
      into deployDirectory
    }
  }}
*/

  if (config.setupDependency) {
    setupTask.dependsOn(config.setupDependency)
  }

  buildTask.dependsOn(setupTask)
  //deployTask.dependsOn(buildTask)
  //config.compileTask.dependsOn(deployTask)
  config.compileTask.dependsOn(buildTask)

  if (!file("${distDirectory}/${parameters.library}").exists()) {
    config.checkTask.dependsOn(buildTask)
  }
  /*
  if (!file("${deployDirectory}/${parameters.library}").exists()) {
    config.checkTask.dependsOn(deployTask)
  }
  */
}
